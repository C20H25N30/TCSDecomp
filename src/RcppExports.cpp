// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kalman_filter
Rcpp::List kalman_filter(arma::mat B0, arma::mat P0, arma::mat Dt, arma::mat At, arma::mat Ft, arma::mat Ht, arma::mat Qt, arma::mat Rt, arma::mat yt);
RcppExport SEXP _TCSDecomp_kalman_filter(SEXP B0SEXP, SEXP P0SEXP, SEXP DtSEXP, SEXP AtSEXP, SEXP FtSEXP, SEXP HtSEXP, SEXP QtSEXP, SEXP RtSEXP, SEXP ytSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dt(DtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type At(AtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ft(FtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ht(HtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qt(QtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rt(RtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yt(ytSEXP);
    rcpp_result_gen = Rcpp::wrap(kalman_filter(B0, P0, Dt, At, Ft, Ht, Qt, Rt, yt));
    return rcpp_result_gen;
END_RCPP
}
// kalman_smoother
Rcpp::List kalman_smoother(arma::mat B_TL, arma::mat B_TT, arma::cube P_TL, arma::cube P_TT, arma::mat Ft);
RcppExport SEXP _TCSDecomp_kalman_smoother(SEXP B_TLSEXP, SEXP B_TTSEXP, SEXP P_TLSEXP, SEXP P_TTSEXP, SEXP FtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B_TL(B_TLSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B_TT(B_TTSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type P_TL(P_TLSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type P_TT(P_TTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ft(FtSEXP);
    rcpp_result_gen = Rcpp::wrap(kalman_smoother(B_TL, B_TT, P_TL, P_TT, Ft));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _TCSDecomp_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _TCSDecomp_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _TCSDecomp_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _TCSDecomp_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TCSDecomp_kalman_filter", (DL_FUNC) &_TCSDecomp_kalman_filter, 9},
    {"_TCSDecomp_kalman_smoother", (DL_FUNC) &_TCSDecomp_kalman_smoother, 5},
    {"_TCSDecomp_rcpparma_hello_world", (DL_FUNC) &_TCSDecomp_rcpparma_hello_world, 0},
    {"_TCSDecomp_rcpparma_outerproduct", (DL_FUNC) &_TCSDecomp_rcpparma_outerproduct, 1},
    {"_TCSDecomp_rcpparma_innerproduct", (DL_FUNC) &_TCSDecomp_rcpparma_innerproduct, 1},
    {"_TCSDecomp_rcpparma_bothproducts", (DL_FUNC) &_TCSDecomp_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_TCSDecomp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
